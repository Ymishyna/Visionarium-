// import React, { useState, useEffect } from "react";
// import { Loader, Card, FormField } from "../components";


// const RenderCards = ({ data, title }) => {
//     if (data?.length > 0) {
//         return data.map((post) => <Card key={post.id} {...post} />);
//     }

//     return (
//         <h2 className="mt-5 font-bold text-[#6449ff] text-xl uppetcase">{title}</h2>
//     )
// }

// const Home = () => {

//     //state variables for the component to store data and loading state of the component 
//     const [loading, setLoading] = useState(false); //loading state
//     const [allPosts, setAllPosts] = useState(null); // all images state
//     const [searchText, setSearchText] = useState(''); // search text state
//     const [searchedResults, setSearchedResults] = useState(null); // search results state
//     const [searchTimeout, setSearchTimeout] = useState(null); // search timeout state


//     // // useEffect hook to fetch all posts from the server
//     // useEffect(() => {
//     //     const fetchPosts = async () => {
//     //         setLoading(true);

//     //         try {
//     //             const response = await fetch('http://localhost:8080/api/v1/post', {
//     //                 method: 'GET',
//     //                 headers: {
//     //                     'Content-Type': 'application/json',
//     //                 },
//     //             })
//     //             if (response.ok) {
//     //                 const result = await response.json();
//     //                 setAllPosts(result.data.reverse());
//     //             }
//     //         } catch (err) {
//     //             alert(err);
//     //         } finally {
//     //             setLoading(false);
//     //         }
//     //     }

//     //     fetchPosts();
//     // }, []);

//     const fetchPosts = async () => {
//         setLoading(true);

//         try {
//             const response = await fetch('https://visionarium-ai-image-generator.onrender.com/api/v1/post', {
//                 method: 'GET',
//                 headers: {
//                     'Content-Type': 'application/json',
//                 },
//             });

//             if (response.ok) {
//                 const result = await response.json();
//                 setAllPosts(result.data.reverse());
//             }
//         } catch (err) {
//             alert(err);
//         } finally {
//             setLoading(false);
//         }
//     };

//     useEffect(() => {
//         fetchPosts();
//     }, []);

//     const handleSearchChange = (e) => {
//         clearTimeout(searchTimeout);

//         setSearchText(e.target.value);

//         setSearchTimeout(
//           setTimeout(() => {
//             const searchResult = allPosts.filter((item) => item.name.toLowerCase().includes(searchText.toLowerCase()) || item.prompt.toLowerCase().includes(searchText.toLowerCase()));
//             setSearchedResults(searchResult);
//           }, 500),
//         );
//       };


//     return (
//         <section className="max-w-7xl mx-auto">
//             <div>
//                 <h1 className="font-extrabold text-[#222328] text-[32px]">The Community Showcase</h1>
//                 <p className="mt-2 text-[#666e75] text-[16px] max-w[500px]">Browse through a collection of imaginative and visually stunning images generated by DALL-E AI</p>
//             </div>

//             <div className="mt-16">
//                 <FormField 
//                 LabelName='Search Posts'
//                 type='text'
//                 name='text'
//                 placeholder='Search Posts'
//                 value={searchText}
//                 handleChange={handleSearchChange}/>

//             </div>

//             <div className="mt-10">
//                 {loading ? (
//                     <div className="flex justify-center items-center">
//                         <Loader />
//                     </div>
//                 ) : (
//                     <>
//                         {searchText && (
//                             <h2 className="font-medium text-[#666e75] text-xl mb-3">Showing results for <span className="text-[#222328]">{searchText}</span>
//                             </h2>
//                         )}
//                         <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3">
//                             {searchText ? (
//                                 <RenderCards
//                                     data={searchedResults}
//                                     title="No search results found" />
//                             ) : (
//                                 <RenderCards
//                                     data={allPosts}
//                                     title="No posts found" />
//                             )}

//                         </div>
//                     </>
//                 )}
//             </div>
//         </section>
//     )
// }

// export default Home;

import React, { useState, useEffect } from "react";
import { Loader, Card, FormField } from "../components";


const RenderCards = ({ data, title }) => {
    if (data?.length > 0) {
        return data.map((post) => <Card key={post.id} {...post} />);
    }

    return (
        <h2 className="mt-5 font-bold text-blue-600 text-xl uppetcase">{title}</h2>
    )
}

const Home = () => {

    //state variables for the component to store data and loading state of the component 
    const [loading, setLoading] = useState(false); //loading state
    const [allPosts, setAllPosts] = useState(null); // all images state
    const [searchText, setSearchText] = useState(''); // search text state
    const [searchedResults, setSearchedResults] = useState(null); // search results state
    const [searchTimeout, setSearchTimeout] = useState(null); // search timeout state

    const fetchPosts = async () => {
        setLoading(true);

        try {
            const response = await fetch('https://visionarium-ai-image-generator.onrender.com/api/v1/post', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                },
            });

            if (response.ok) {
                const result = await response.json();
                setAllPosts(result.data.reverse());
            }
        } catch (err) {
            alert(err);
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchPosts();
    }, []);

    const handleSearchChange = (e) => {
        clearTimeout(searchTimeout);

        setSearchText(e.target.value);

        setSearchTimeout(
            setTimeout(() => {
                const searchResult = allPosts.filter((item) => item.name.toLowerCase().includes(searchText.toLowerCase()) || item.prompt.toLowerCase().includes(searchText.toLowerCase()));
                setSearchedResults(searchResult);
            }, 500),
        );
    };


    return (
        <section className="max-w-7xl mx-auto">
            <div>
                <h1 className="font-extrabold text-gray-900 text-4xl">The Global Gallery</h1>
                <p className="mt-4 text-gray-600 text-lg max-w-2xl">Explore a captivating array of imaginative and visually striking images crafted by DALL-E AI within Visionarium, where you can bring your unique visions to life.
                </p>
            </div>

            <div className="mt-16">
                <FormField
                    LabelName='Search Posts'
                    type='text'
                    name='text'
                    placeholder='Search Posts'
                    value={searchText}
                    handleChange={handleSearchChange} />

            </div>

            <div className="mt-10">
                {loading ? (
                    <div className="flex justify-center items-center">
                        <Loader />
                    </div>
                ) : (
                    <>
                        {searchText && (
                            <h2 className="font-medium text-gray-600 text-xl mb-3">Showing results for <span className="text-[#222328]">{searchText}</span>
                            </h2>
                        )}
                        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                            {searchText ? (
                                <RenderCards
                                    data={searchedResults}
                                    title="No search results found" />
                            ) : (
                                <RenderCards
                                    data={allPosts}
                                    title="No posts found" />
                            )}

                        </div>
                    </>
                )}
            </div>
        </section>
    )
}

export default Home;